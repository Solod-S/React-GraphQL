{"version":3,"file":"410.d288db8e.iframe.bundle.js","mappings":";;;;;;;;;;AA2BA;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;ACxBA","sources":["webpack://client/./src/components/MovieCard/index.js","webpack://client/./src/components/MovieDetailModal/queries.js","webpack://client/./src/components/MovieDetailModal/index.js"],"sourcesContent":["import * as React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CardMenu from \"../CardMenu\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Box, MenuItem, Tooltip } from \"@mui/material\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { SiImdb } from \"react-icons/si\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nimport DefaultPoster from \"../../assets/poster.jpg\";\r\nimport { MdOutlineBookmarkAdded } from \"react-icons/md\";\r\n\r\nexport const MoviesRating = styled(({ movieRating, ...other }) => (\r\n  <Box {...other} />\r\n))`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 2%;\r\n  left: 2%;\r\n  padding: 4px 8px;\r\n  font-weight: 600;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  background-color: ${({ movieRating }) => {\r\n    if (movieRating > 6) {\r\n      return \"#55ff00b0\";\r\n    }\r\n    if (movieRating >= 4 && movieRating <= 6) {\r\n      return \"#ffcb2f70\";\r\n    }\r\n    return \"#ff00009c\";\r\n  }};\r\n  border-radius: 8px;\r\n  color: #000;\r\n  font-size: 1rem;\r\n  line-height: 1;\r\n`;\r\n\r\nconst truncateString = (string, length = 35) => {\r\n  if (string.length >= length) {\r\n    return string.substring(0, length - 3) + \"...\";\r\n  }\r\n  return string;\r\n};\r\n\r\nconst MovieCard = ({\r\n  movie,\r\n  onCardSelect,\r\n  isPreviewMode = false,\r\n  openMovieDetailsById,\r\n  selected = false,\r\n}) => {\r\n  const menuRef = React.useRef();\r\n\r\n  const callhandleClose = () => {\r\n    if (menuRef.current) {\r\n      menuRef.current.handleClose();\r\n    }\r\n  };\r\n\r\n  const handleMovieDetails = movie => {\r\n    openMovieDetailsById(movie.id);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        position: \"relative\",\r\n        transition: \"transform 0.3s ease\",\r\n        \"&:hover\": {\r\n          transform: \"scale(1.03)\",\r\n        },\r\n      }}\r\n    >\r\n      {selected && (\r\n        <MdOutlineBookmarkAdded\r\n          color=\"#FF6700\"\r\n          size={25}\r\n          style={{\r\n            position: \"absolute\",\r\n            bottom: 5,\r\n            right: 5,\r\n            zIndex: 1,\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {!isPreviewMode && (\r\n        <CardMenu ref={menuRef}>\r\n          <MenuItem\r\n            onClick={() => {\r\n              callhandleClose();\r\n              setTimeout(() => {\r\n                onCardSelect(movie);\r\n              }, 100);\r\n            }}\r\n          >\r\n            <FormattedMessage id=\"select\" />\r\n          </MenuItem>\r\n        </CardMenu>\r\n      )}\r\n\r\n      <MoviesRating movieRating={Math.round(movie.voteAverage || 0)}>\r\n        <SiImdb size={25} style={{ marginRight: \"4px\" }} />{\" \"}\r\n        <span>{Math.round(movie.voteAverage || 0)}</span>\r\n      </MoviesRating>\r\n\r\n      <CardMedia\r\n        component=\"img\"\r\n        image={!movie.image ? DefaultPoster : movie.image}\r\n        alt={movie.title}\r\n        style={{ height: \"431px\", cursor: \"pointer\" }}\r\n        onClick={() => handleMovieDetails(movie)}\r\n      />\r\n      <CardContent style={{ paddingBottom: \"16px\", height: \"150px\" }}>\r\n        {movie.title.length > 35 ? (\r\n          <Tooltip title={movie.title} arrow>\r\n            <Typography variant=\"h5\" gutterBottom component=\"div\">\r\n              {truncateString(movie.title, 35)}\r\n            </Typography>\r\n          </Tooltip>\r\n        ) : (\r\n          <Typography variant=\"h5\" gutterBottom component=\"div\">\r\n            {movie.title}\r\n          </Typography>\r\n        )}\r\n        <Typography variant=\"subtitle1\" gutterBottom component=\"div\">\r\n          {movie.releaseDate}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nMovieCard.protoTypes = {\r\n  movie: PropTypes.shape({\r\n    image: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    releaseDate: PropTypes.string,\r\n  }).isRequired,\r\n  onCardSelect: PropTypes.func.isRequired,\r\n  isPreviewMode: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default MovieCard;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst MOVIE_DETAIL_BY_ID_QUERY = gql`\r\n  query MoviesByIds($ids: [Int]) {\r\n    moviesByIds(ids: $ids) {\r\n      releaseDate(format: \"dd MMM yyy\")\r\n      image: posterPath\r\n      title\r\n      id\r\n      adult\r\n      backdropPath\r\n      originalLanguage\r\n      originalTitle\r\n      overview\r\n      popularity\r\n      video\r\n      voteAverage\r\n      voteCount\r\n      genres {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst TRAILERS_BY_ID_QUERY = gql`\r\n  query TrailersById($id: Int) {\r\n    trailersById(id: $id) {\r\n      key\r\n      site\r\n      type\r\n    }\r\n  }\r\n`;\r\n\r\nconst CASTS_BY_ID_QUERY = gql`\r\n  query CreditsById($id: Int) {\r\n    creditsById(id: $id) {\r\n      adult\r\n      castId\r\n      character\r\n      creditId\r\n      gender\r\n      id\r\n      knownForDepartment\r\n      name\r\n      order\r\n      originalName\r\n      popularity\r\n      posterPath\r\n    }\r\n  }\r\n`;\r\n\r\nconst REVIEWS_BY_ID_QUERY = gql`\r\n  query Reviews($filter: ReviewsFilterInput!) {\r\n    reviews(filter: $filter) {\r\n      page\r\n      results {\r\n        author\r\n        authorDetails {\r\n          name\r\n          username\r\n          avatar_path\r\n          rating\r\n        }\r\n        content\r\n        createdAt\r\n        id\r\n        updatedAt\r\n        url\r\n      }\r\n      totalPages\r\n      totalResults\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  MOVIE_DETAIL_BY_ID_QUERY,\r\n  TRAILERS_BY_ID_QUERY,\r\n  CASTS_BY_ID_QUERY,\r\n  REVIEWS_BY_ID_QUERY,\r\n};\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport PropTypes from \"prop-types\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\nimport {\r\n  Divider,\r\n  Button,\r\n  IconButton,\r\n  useMediaQuery,\r\n  Tooltip,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport {\r\n  MOVIE_DETAIL_BY_ID_QUERY,\r\n  TRAILERS_BY_ID_QUERY,\r\n  CASTS_BY_ID_QUERY,\r\n  REVIEWS_BY_ID_QUERY,\r\n} from \"./queries\";\r\nimport DefaultPoster from \"../../assets/poster.jpg\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\nconst MovieDetailModal = ({\r\n  isPreviewMode,\r\n  open = false,\r\n  movieId,\r\n\r\n  onClose = () => {},\r\n  selectedMovies = [],\r\n  selectMovie = () => {},\r\n  deleteMovie = () => {},\r\n}) => {\r\n  const { loading, error, data } = useQuery(MOVIE_DETAIL_BY_ID_QUERY, {\r\n    variables: {\r\n      ids: [+movieId],\r\n    },\r\n    skip: !movieId || movieId === \"\",\r\n  });\r\n\r\n  const {\r\n    // loading: trailersLoading,\r\n    // error: trailersError,\r\n    data: trailersData,\r\n  } = useQuery(TRAILERS_BY_ID_QUERY, {\r\n    variables: {\r\n      id: +movieId,\r\n    },\r\n    skip: !movieId || movieId === \"\",\r\n  });\r\n\r\n  const {\r\n    // loading: trailersLoading,\r\n    // error: trailersError,\r\n    data: castsData,\r\n  } = useQuery(CASTS_BY_ID_QUERY, {\r\n    variables: {\r\n      id: +movieId,\r\n    },\r\n    skip: !movieId || movieId === \"\",\r\n  });\r\n\r\n  const {\r\n    // loading: reviewLoading,\r\n    // error,\r\n    data: reviewsData,\r\n    refetch,\r\n  } = useQuery(REVIEWS_BY_ID_QUERY, {\r\n    variables: {\r\n      filter: {\r\n        page: 1,\r\n        id: +movieId,\r\n      },\r\n    },\r\n    skip: !movieId || isNaN(Number(movieId)) || Number(movieId) <= 0,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (movieId && !isNaN(Number(movieId)) && Number(movieId) > 0) {\r\n      refetch(); // Выполнить запрос, если movieId валиден\r\n    }\r\n  }, [movieId, refetch]);\r\n\r\n  const [trailerUrl, setTrailerUrl] = React.useState(null);\r\n  const [casts, setCasts] = React.useState([]);\r\n  const [reviews, setReviews] = React.useState([]);\r\n  const isLargeScreen = useMediaQuery(\"(min-width:1280px)\");\r\n  // console.log(`movieId`, movieId);\r\n  const contentStyle = {\r\n    display: \"flex\",\r\n    flexDirection: isLargeScreen ? \"row\" : \"column\",\r\n  };\r\n\r\n  const imageStyle = {\r\n    width: isLargeScreen ? \"40%\" : \"100%\",\r\n    marginRight: isLargeScreen ? \"20px\" : \"0\",\r\n    marginBottom: isLargeScreen ? \"0\" : \"20px\",\r\n    borderRadius: \"10px\",\r\n  };\r\n\r\n  const textContentStyle = {\r\n    width: isLargeScreen ? \"60%\" : \"100%\",\r\n  };\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    borderRadius: \"15px\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    bgcolor: \"background.paper\",\r\n    boxShadow: 24,\r\n    p: 4,\r\n    maxHeight: \"90vh\",\r\n\r\n    overflowY: \"auto\",\r\n\r\n    scrollbarWidth: \"thin\",\r\n    \"&::-webkit-scrollbar\": {\r\n      width: \"6px\", // Для WebKit-браузеров (Chrome, Safari, Edge)\r\n    },\r\n    \"&::-webkit-scrollbar-track\": {\r\n      backgroundColor: \"transparent\", // Цвет трека полосы\r\n    },\r\n    \"&::-webkit-scrollbar-thumb\": {\r\n      backgroundColor: \"#888\", // Цвет ползунка\r\n      borderRadius: \"10px\",\r\n    },\r\n    \"&::-webkit-scrollbar-thumb:hover\": {\r\n      backgroundColor: \"#555\", // Цвет ползунка при наведении\r\n    },\r\n  };\r\n\r\n  if (!isLargeScreen) {\r\n    style.minWidth = \"90%\";\r\n  }\r\n\r\n  const videoStyle = {\r\n    width: \"100%\",\r\n    height: \"315px\",\r\n    marginTop: \"20px\",\r\n    borderRadius: \"10px\",\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (trailersData && trailersData?.trailersById?.length > 0) {\r\n      const trailer = trailersData.trailersById.find(\r\n        video => video.type === \"Trailer\" && video.site === \"YouTube\"\r\n      );\r\n\r\n      if (trailer) {\r\n        setTrailerUrl(`https://www.youtube.com/embed/${trailer.key}`);\r\n      }\r\n    }\r\n    if (castsData && castsData?.creditsById?.length > 0) {\r\n      setCasts(castsData.creditsById.slice(0, 10));\r\n    }\r\n\r\n    if (reviewsData && reviewsData?.reviews?.results?.length > 0) {\r\n      setReviews(reviewsData.reviews.results.slice(0, 5));\r\n    }\r\n\r\n    return () => {\r\n      setTrailerUrl(null);\r\n      setCasts([]);\r\n      setReviews([]);\r\n    };\r\n  }, [trailersData, castsData, reviewsData]);\r\n\r\n  if (loading) return <Typography>Loading...</Typography>;\r\n  if (error) return <Typography>Error loading data</Typography>;\r\n\r\n  const movie = data?.moviesByIds[0];\r\n\r\n  return (\r\n    <Modal open={open} onClose={onClose} aria-label=\"modal-title\">\r\n      <Box sx={style}>\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: \"absolute\",\r\n            right: 8,\r\n            top: 8,\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n        <Box sx={contentStyle}>\r\n          <Box sx={imageStyle}>\r\n            <img\r\n              src={!movie?.image ? DefaultPoster : movie?.image}\r\n              alt={movie?.title}\r\n              style={{\r\n                width: \"100%\",\r\n                borderRadius: \"10px\",\r\n              }}\r\n            />\r\n            <Divider sx={{ my: 1 }} />\r\n            <Typography variant=\"body1\">\r\n              <strong>\r\n                <FormattedMessage id=\"movie_details.original_title\" />:\r\n              </strong>{\" \"}\r\n              {movie?.originalTitle}\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              <strong>\r\n                <FormattedMessage id=\"movie_details.vote\" />:\r\n              </strong>{\" \"}\r\n              {movie?.voteAverage && Number(movie?.voteAverage.toFixed(1))}\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              <strong>\r\n                <FormattedMessage id=\"movie_details.release_date\" />:\r\n              </strong>{\" \"}\r\n              {movie?.releaseDate}\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              <strong>\r\n                <FormattedMessage id=\"movie_details.genre\" />:\r\n              </strong>{\" \"}\r\n              {movie?.genres?.length > 0 &&\r\n                movie.genres.map(({ name }, index) =>\r\n                  index + 1 < movie.genres.length ? `${name}, ` : name\r\n                )}\r\n            </Typography>\r\n            {casts.length > 0 && (\r\n              <Typography variant=\"body1\">\r\n                <strong>\r\n                  <FormattedMessage\r\n                    id=\"movie_details.cast\"\r\n                    defaultMessage=\"Cast\"\r\n                  />\r\n                  :\r\n                </strong>{\" \"}\r\n                {casts.map((actor, index) => (\r\n                  <React.Fragment key={actor.id}>\r\n                    <Tooltip\r\n                      title={\r\n                        <img\r\n                          src={actor.posterPath}\r\n                          alt={actor.name}\r\n                          style={{ width: \"100px\", height: \"150px\" }}\r\n                        />\r\n                      }\r\n                      arrow\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>{actor.name}</span>\r\n                    </Tooltip>\r\n                    {index < casts.length - 1 ? \", \" : \"...\"}\r\n                  </React.Fragment>\r\n                ))}\r\n              </Typography>\r\n            )}\r\n            <Divider sx={{ my: 1 }} />\r\n          </Box>\r\n\r\n          <Box sx={textContentStyle}>\r\n            <Typography id=\"modal-title\" variant=\"h5\" component=\"h2\">\r\n              {movie?.title}\r\n            </Typography>\r\n            {trailerUrl && (\r\n              <Box sx={videoStyle}>\r\n                <iframe\r\n                  width=\"100%\"\r\n                  height=\"100%\"\r\n                  src={trailerUrl}\r\n                  title=\"Movie Trailer\"\r\n                  frameBorder=\"0\"\r\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                  allowFullScreen\r\n                ></iframe>\r\n              </Box>\r\n            )}\r\n\r\n            <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n              {movie?.overview}\r\n            </Typography>\r\n\r\n            {!isPreviewMode && (\r\n              <Box sx={{ display: \"flex\", justifyContent: \"center\", mt: 2 }}>\r\n                {!selectedMovies?.some(sm => sm.id === movie?.id) ? (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    disabled={!Boolean(data?.moviesByIds[0])}\r\n                    color=\"primary\"\r\n                    sx={{\r\n                      flex: 0.8,\r\n                      transition: \"transform 0.3s ease\",\r\n                      \"&:hover\": {\r\n                        transform: \"scale(1.03)\",\r\n                      },\r\n                    }}\r\n                    onClick={() => selectMovie(movie)}\r\n                  >\r\n                    <FormattedMessage id=\"movie_details.add_to_selected_btn\" />\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    disabled={!Boolean(data?.moviesByIds[0])}\r\n                    color=\"error\"\r\n                    sx={{\r\n                      flex: 0.8,\r\n                      transition: \"transform 0.3s ease\",\r\n                      \"&:hover\": {\r\n                        transform: \"scale(1.03)\",\r\n                      },\r\n                    }}\r\n                    onClick={() => deleteMovie(movie)}\r\n                  >\r\n                    <FormattedMessage id=\"movie_details.remove_selected_btn\" />\r\n                  </Button>\r\n                )}\r\n                {/* <Button variant=\"outlined\" color=\"secondary\" sx={{ ml: 2 }}>\r\n                  Add to Favorite\r\n                </Button> */}\r\n              </Box>\r\n            )}\r\n            {reviews && reviews.length > 0 && (\r\n              <>\r\n                <Typography\r\n                  variant=\"h6\"\r\n                  gutterBottom\r\n                  sx={{ textAlign: \"center\", marginTop: \"16px\" }}\r\n                >\r\n                  <FormattedMessage id=\"movie_details.reviews\" />\r\n                </Typography>\r\n                <List\r\n                  sx={{\r\n                    maxHeight: \"350px\",\r\n                    overflow: \"auto\",\r\n                    scrollbarWidth: \"thin\",\r\n                    \"&::-webkit-scrollbar\": {\r\n                      width: \"6px\", // Для WebKit-браузеров (Chrome, Safari, Edge)\r\n                    },\r\n                    \"&::-webkit-scrollbar-track\": {\r\n                      backgroundColor: \"transparent\", // Цвет трека полосы\r\n                    },\r\n                    \"&::-webkit-scrollbar-thumb\": {\r\n                      backgroundColor: \"#888\", // Цвет ползунка\r\n                      borderRadius: \"10px\",\r\n                    },\r\n                    \"&::-webkit-scrollbar-thumb:hover\": {\r\n                      backgroundColor: \"#555\", // Цвет ползунка при наведении\r\n                    },\r\n                  }}\r\n                >\r\n                  {reviews.map(review => (\r\n                    <React.Fragment key={review.id}>\r\n                      <ListItem>\r\n                        <ListItemAvatar>\r\n                          <Avatar\r\n                            src={review.authorDetails.avatar_path}\r\n                            alt={review.authorDetails.name || review.author}\r\n                          />\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                          primary={\r\n                            <Typography\r\n                              variant=\"body1\"\r\n                              component=\"div\"\r\n                              fontWeight=\"bold\"\r\n                            >\r\n                              {review.authorDetails.name || review.author}\r\n                            </Typography>\r\n                          }\r\n                          secondary={\r\n                            <Box>\r\n                              <Typography\r\n                                variant=\"body2\"\r\n                                color=\"textPrimary\"\r\n                                component=\"div\"\r\n                              >\r\n                                <span\r\n                                  dangerouslySetInnerHTML={{\r\n                                    __html: review.content,\r\n                                  }}\r\n                                />\r\n                              </Typography>\r\n                              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                                {formatDistanceToNow(\r\n                                  new Date(review.createdAt),\r\n                                  {\r\n                                    addSuffix: true,\r\n                                  }\r\n                                )}\r\n                              </Typography>\r\n                            </Box>\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                      <Divider variant=\"inset\" component=\"li\" />\r\n                    </React.Fragment>\r\n                  ))}\r\n                </List>\r\n              </>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nMovieDetailModal.propTypes = {\r\n  open: PropTypes.bool,\r\n  movieId: PropTypes.string,\r\n  title: PropTypes.string,\r\n  onClose: PropTypes.func,\r\n};\r\n\r\nexport default MovieDetailModal;\r\n"],"names":[],"sourceRoot":""}