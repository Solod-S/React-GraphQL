{"version":3,"file":"static/js/81.fcc1c1ac.chunk.js","mappings":"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","sources":["config/index.js","hooks/useMovies/index.js","hooks/useSavedMovies/queries.js","hooks/useSavedMovies/index.js","pages/Favorites/queries.js","pages/Favorites/index.js","utils/renderSkeletons.js"],"sourcesContent":["export const SELECTED_MOVIES_LIMIT = 12;\n","import { useCallback, useLayoutEffect, useState } from \"react\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport { saveToStorage, getFromStorage } from \"../../utils/localStorage\";\nimport { SELECTED_MOVIES_KEY } from \"../../constants\";\n\nexport const useMovies = () => {\n  const [selectedMovies, setSelectedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    const savedSelectedMovies = getFromStorage(SELECTED_MOVIES_KEY);\n    if (savedSelectedMovies) {\n      setSelectedMovies(savedSelectedMovies);\n    }\n  }, []);\n\n  const selectMovie = useCallback(\n    movie => {\n      const length = selectedMovies.length;\n      const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n      console.log(`movie`, movie);\n      if (isNewMovie && length < SELECTED_MOVIES_LIMIT) {\n        setSelectedMovies(prevMovies => {\n          const updatedMovies = [...prevMovies, movie];\n          saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n          return updatedMovies;\n        });\n      }\n    },\n    [selectedMovies]\n  );\n\n  const deleteMovie = useCallback(\n    movie => {\n      setSelectedMovies(prevState => {\n        const updatedMovies = prevState.filter(({ id }) => id !== movie.id);\n        saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n        return updatedMovies;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selectedMovies]\n  );\n\n  return {\n    selectedMovies,\n    selectMovie,\n    deleteMovie,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int, $all: Boolean) {\n    getSavedMovies(page: $page, all: $all) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n  mutation SaveMovie($movie: MovieInput!) {\n    saveMovie(movie: $movie) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n      voteAverage\n      voteCount\n    }\n  }\n`;\n\nexport const REMOVE_MOVIE = gql`\n  mutation RemoveMovie($id: ID!) {\n    removeMovie(id: $id) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n    }\n  }\n`;\n","import { useContext, useLayoutEffect, useState } from \"react\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { GET_SAVED_MOVIES, SAVE_MOVIE, REMOVE_MOVIE } from \"./queries\";\nimport { useMutation, useQuery } from \"@apollo/client\";\n\nexport const useSavedMovies = () => {\n  const { state } = useContext(AppContext);\n  const [savedMoviesLoading, setSavedMoviesLoading] = useState(false);\n  const [saveMovie] = useMutation(SAVE_MOVIE);\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page: 1, all: true },\n    // skip: true, // Изначально пропускаем запрос\n  });\n  const [removeMovie] = useMutation(REMOVE_MOVIE);\n  const [savedMovies, setSavedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    if (state.user) {\n      // Если пользователь существует, запускаем refetch для получения данных\n      refetch();\n    }\n  }, [state.user, refetch]);\n\n  useLayoutEffect(() => {\n    if (data && data?.getSavedMovies) {\n      setSavedMovies(data.getSavedMovies.results); // Устанавливаем фильмы, когда есть данные\n    }\n  }, [data]);\n\n  const addMovieToSaved = async movie => {\n    setSavedMoviesLoading(true);\n    const isNewMovie = !savedMovies.find(({ id }) => id === movie.id);\n\n    if (isNewMovie) {\n      setSavedMovies(prevMovies => {\n        const updatedMovies = [...prevMovies, { ...movie, movieId: movie.id }];\n        return updatedMovies;\n      });\n\n      try {\n        const movieObj = {\n          id: movie.id,\n          title: movie.title,\n          releaseDate: movie.releaseDate,\n          image: movie.image || \"\",\n          genres: movie?.genres?.map(m => m.id) || [],\n          adult: movie.adult || false,\n          backdropPath: movie.backdropPath || \"\",\n          originalLanguage: movie.originalLanguage || \"\",\n          originalTitle: movie.originalTitle || \"\",\n          overview: movie.overview || \"\",\n          popularity: movie.popularity || 0,\n          video: movie.video || false,\n          voteAverage: movie.voteAverage || 0,\n          voteCount: movie.voteCount || 0,\n        };\n\n        await saveMovie({\n          variables: {\n            movie: movieObj,\n          },\n        });\n\n        return true;\n      } catch (error) {\n        console.error(\"Error saving movie:\", error);\n        return false;\n      } finally {\n        setSavedMoviesLoading(false);\n      }\n    }\n  };\n\n  const removeMovieFromSaved = async movie => {\n    setSavedMoviesLoading(true);\n    try {\n      await removeMovie({\n        variables: {\n          id: movie.id,\n        },\n      });\n      setSavedMovies(prevMovies => {\n        const updatedMovies = prevMovies.filter(m => {\n          const movieIdCheck = m.movieId\n            ? String(m.movieId) !== String(movie.id)\n            : true;\n          return String(m.id) !== String(movie.id) && movieIdCheck;\n        });\n\n        return updatedMovies;\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error removing movie:\", error);\n      return false;\n    } finally {\n      setSavedMoviesLoading(false);\n    }\n  };\n\n  return {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n    loading,\n    error,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int) {\n    getSavedMovies(page: $page, perPage: 12) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n","import { useQuery } from \"@apollo/client\";\nimport { GET_SAVED_MOVIES } from \"./queries\";\nimport { useEffect, useState } from \"react\";\nimport {\n  MovieCard,\n  MovieDetailModal,\n  Paginator,\n  ServerError,\n} from \"../../components\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\nimport renderSkeletons from \"../../utils/renderSkeletons\";\nimport { framerListVariants } from \"../../constants\";\nimport { useContext } from \"react\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { useMovies } from \"../../hooks/useMovies\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useCustomNotification } from \"../../hooks/useCustomNotification\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport { useSavedMovies } from \"../../hooks/useSavedMovies\";\n\nconst Favorites = () => {\n  const { state } = useContext(AppContext);\n\n  const [movieId, setMovieId] = useState(\"\");\n  const [moviesList, setMoviesList] = useState([]);\n  const [page, setPage] = useState(1);\n  const [boxMinHeight, setBoxMinHeight] = useState();\n\n  const { showNotification, NotificationComponent } = useCustomNotification();\n  const { selectedMovies, selectMovie, deleteMovie } = useMovies();\n  const {\n    savedMovies,\n    removeMovieFromSaved,\n    addMovieToSaved,\n    savedMoviesLoading,\n  } = useSavedMovies();\n\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page },\n  });\n\n  useEffect(() => {\n    if (data?.getSavedMovies?.results?.length > 0) {\n      setMoviesList(prevState => {\n        return data.getSavedMovies.results.map(newMovie => {\n          const oldMovie = prevState.find(movie => movie.id === newMovie.id);\n          return {\n            ...newMovie,\n            image: oldMovie ? oldMovie.image : newMovie.image,\n          };\n        });\n      });\n    } else setMoviesList([]);\n  }, [data]);\n\n  useEffect(() => {\n    // Dynamically find the header and calculate its height\n    const headerElement = document.querySelector(\"header\");\n    const footerElement = document.querySelector(\"footer\");\n\n    if (headerElement) {\n      const headerHeight = headerElement.offsetHeight;\n      const footerHeight = footerElement.offsetHeight;\n      setBoxMinHeight(`calc(100vh - ${headerHeight + footerHeight}px)`);\n    }\n  }, []);\n\n  const paginationHandler = (event, page) => {\n    setPage(page);\n    setTimeout(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\",\n      });\n    }, 100);\n  };\n\n  const onCloseConfirmModal = () => {\n    setMovieId(\"\");\n  };\n  const selectMovieHandler = movie => {\n    const length = selectedMovies.length;\n    const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n    switch (true) {\n      case !isNewMovie:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_already_selected\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      case length >= SELECTED_MOVIES_LIMIT:\n        showNotification(\n          <FormattedMessage id=\"notification.list_limit_reached\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_added_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    selectMovie(movie);\n  };\n\n  const deleteMovieHandler = movie => {\n    switch (true) {\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    deleteMovie(movie);\n  };\n\n  const removeFavoriteMovie = async movie => {\n    const result = await removeMovieFromSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in removing movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      refetch();\n      showNotification(\n        <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const addFavoriteMovie = async movie => {\n    console.log(`movie`, movie);\n    const result = await addMovieToSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in saving movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      refetch();\n      showNotification(\n        <FormattedMessage id=\"notification.movie_add_to_favorite_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  if (error) {\n    console.log(`error in favorite page: ${error}`);\n    return <ServerError />;\n  }\n\n  return (\n    <Box\n      sx={{\n        minHeight: boxMinHeight,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: 3,\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      {NotificationComponent}\n      <MovieDetailModal\n        user={state.user || null}\n        title={movieId}\n        movieId={movieId}\n        open={!!movieId}\n        onClose={onCloseConfirmModal}\n        selectedMovies={selectedMovies}\n        selectMovie={selectMovieHandler}\n        deleteMovie={deleteMovieHandler}\n        removeFavoriteMovie={removeFavoriteMovie}\n        addFavoriteMovie={addFavoriteMovie}\n        savedMovies={savedMovies}\n        savedMoviesLoading={savedMoviesLoading}\n      />\n      <dix style={{ height: \"80%\" }}></dix>\n\n      <Grid item xs={12} md={8} sx={{ width: \"100%\" }}>\n        <Paper sx={{ padding: 2, minHeight: \"400px\" }}>\n          <Box sx={{ flexGrow: 1, marginBottom: \"16px\" }}>\n            {loading && renderSkeletons({ favoriteMode: true })}\n            {moviesList && (\n              <Grid container spacing={2}>\n                {moviesList.map((movie, index) => (\n                  <Grid key={movie.id} item xs={12} md={3} lg={2}>\n                    <motion.div\n                      className=\"portfolio__item\"\n                      variants={framerListVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      custom={index}\n                    >\n                      <MovieCard\n                        movie={movie}\n                        onCardSelect={() => console.log(`onCardSelect`)}\n                        openMovieDetailsById={setMovieId}\n                        selected={selectedMovies.find(\n                          ({ id }) => id === movie.id\n                        )}\n                        favorites={savedMovies.find(\n                          ({ id, movieId }) => movie.id === movieId\n                        )}\n                        isPreviewMode\n                      />\n                    </motion.div>\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </Box>\n          {moviesList.length > 0 && (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <Paginator\n                totalPages={\n                  Number(data?.getSavedMovies?.totalPages) > 500\n                    ? 500\n                    : data?.getSavedMovies?.totalPages || 1\n                }\n                page={page}\n                paginationHandler={paginationHandler}\n              />\n            </Box>\n          )}\n        </Paper>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Favorites;\n","import { Grid, Skeleton } from \"@mui/material\";\n\nconst renderSkeletons = ({ favoriteMode = false }) => {\n  return (\n    <Grid container spacing={2}>\n      {Array.from(new Array(8)).map((_, index) => (\n        <Grid\n          key={index}\n          item\n          xs={12}\n          md={favoriteMode ? 3 : 4}\n          lg={favoriteMode ? 2 : 3}\n        >\n          <Skeleton variant=\"rectangular\" height={431} />\n          <Skeleton variant=\"text\" height={32} />\n          <Skeleton variant=\"text\" height={32} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default renderSkeletons;\n"],"names":["SELECTED_MOVIES_LIMIT","useMovies","selectedMovies","setSelectedMovies","useState","useLayoutEffect","savedSelectedMovies","getFromStorage","SELECTED_MOVIES_KEY","selectMovie","useCallback","movie","length","isNewMovie","find","_ref","id","console","log","prevMovies","updatedMovies","saveToStorage","deleteMovie","prevState","filter","_ref2","GET_SAVED_MOVIES","gql","SAVE_MOVIE","REMOVE_MOVIE","useSavedMovies","state","useContext","AppContext","savedMoviesLoading","setSavedMoviesLoading","saveMovie","useMutation","loading","error","data","refetch","useQuery","variables","page","all","removeMovie","savedMovies","setSavedMovies","user","getSavedMovies","results","addMovieToSaved","async","movieId","_movie$genres","movieObj","title","releaseDate","image","genres","map","m","adult","backdropPath","originalLanguage","originalTitle","overview","popularity","video","voteAverage","voteCount","removeMovieFromSaved","movieIdCheck","String","Favorites","_data$getSavedMovies2","_data$getSavedMovies3","setMovieId","moviesList","setMoviesList","setPage","boxMinHeight","setBoxMinHeight","showNotification","NotificationComponent","useCustomNotification","useEffect","_data$getSavedMovies","_data$getSavedMovies$","newMovie","oldMovie","headerElement","document","querySelector","footerElement","headerHeight","offsetHeight","footerHeight","_jsx","ServerError","_jsxs","Box","sx","minHeight","display","flexDirection","alignItems","padding","backgroundColor","children","MovieDetailModal","open","onClose","onCloseConfirmModal","FormattedMessage","vertical","horizontal","removeFavoriteMovie","addFavoriteMovie","style","height","Grid","item","xs","md","width","Paper","flexGrow","marginBottom","renderSkeletons","favoriteMode","container","spacing","index","lg","motion","div","className","variants","framerListVariants","initial","animate","custom","MovieCard","onCardSelect","openMovieDetailsById","selected","favorites","_ref3","isPreviewMode","justifyContent","Paginator","totalPages","Number","paginationHandler","event","setTimeout","window","scrollTo","top","behavior","Array","from","_","Skeleton","variant"],"sourceRoot":""}