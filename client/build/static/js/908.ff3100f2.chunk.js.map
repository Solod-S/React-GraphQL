{"version":3,"file":"static/js/908.ff3100f2.chunk.js","mappings":"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","sources":["config/index.js","hooks/useMovies/index.js","hooks/useSavedMovies/queries.js","hooks/useSavedMovies/index.js","pages/Home/queries.js","pages/Home/index.js","hooks/useFilters/index.js","utils/renderSkeletons.js"],"sourcesContent":["export const SELECTED_MOVIES_LIMIT = 12;\n","import { useCallback, useLayoutEffect, useState } from \"react\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport { saveToStorage, getFromStorage } from \"../../utils/localStorage\";\nimport { SELECTED_MOVIES_KEY } from \"../../constants\";\n\nexport const useMovies = () => {\n  const [selectedMovies, setSelectedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    const savedSelectedMovies = getFromStorage(SELECTED_MOVIES_KEY);\n    if (savedSelectedMovies) {\n      setSelectedMovies(savedSelectedMovies);\n    }\n  }, []);\n\n  const selectMovie = useCallback(\n    movie => {\n      const length = selectedMovies.length;\n      const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n      console.log(`movie`, movie);\n      if (isNewMovie && length < SELECTED_MOVIES_LIMIT) {\n        setSelectedMovies(prevMovies => {\n          const updatedMovies = [...prevMovies, movie];\n          saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n          return updatedMovies;\n        });\n      }\n    },\n    [selectedMovies]\n  );\n\n  const deleteMovie = useCallback(\n    movie => {\n      setSelectedMovies(prevState => {\n        const updatedMovies = prevState.filter(({ id }) => id !== movie.id);\n        saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n        return updatedMovies;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selectedMovies]\n  );\n\n  return {\n    selectedMovies,\n    selectMovie,\n    deleteMovie,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int, $all: Boolean) {\n    getSavedMovies(page: $page, all: $all) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n  mutation SaveMovie($movie: MovieInput!) {\n    saveMovie(movie: $movie) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n      voteAverage\n      voteCount\n    }\n  }\n`;\n\nexport const REMOVE_MOVIE = gql`\n  mutation RemoveMovie($id: ID!) {\n    removeMovie(id: $id) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n    }\n  }\n`;\n","import { useContext, useLayoutEffect, useState } from \"react\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { GET_SAVED_MOVIES, SAVE_MOVIE, REMOVE_MOVIE } from \"./queries\";\nimport { useMutation, useQuery } from \"@apollo/client\";\n\nexport const useSavedMovies = () => {\n  const { state } = useContext(AppContext);\n  const [savedMoviesLoading, setSavedMoviesLoading] = useState(false);\n  const [saveMovie] = useMutation(SAVE_MOVIE);\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page: 1, all: true },\n    // skip: true, // Изначально пропускаем запрос\n  });\n  const [removeMovie] = useMutation(REMOVE_MOVIE);\n  const [savedMovies, setSavedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    if (state.user) {\n      // Если пользователь существует, запускаем refetch для получения данных\n      refetch();\n    }\n  }, [state.user, refetch]);\n\n  useLayoutEffect(() => {\n    if (data && data?.getSavedMovies) {\n      setSavedMovies(data.getSavedMovies.results); // Устанавливаем фильмы, когда есть данные\n    }\n  }, [data]);\n\n  const addMovieToSaved = async movie => {\n    setSavedMoviesLoading(true);\n    const isNewMovie = !savedMovies.find(({ id }) => id === movie.id);\n\n    if (isNewMovie) {\n      setSavedMovies(prevMovies => {\n        const updatedMovies = [...prevMovies, { ...movie, movieId: movie.id }];\n        return updatedMovies;\n      });\n\n      try {\n        const movieObj = {\n          id: movie.id,\n          title: movie.title,\n          releaseDate: movie.releaseDate,\n          image: movie.image || \"\",\n          genres: movie?.genres?.map(m => m.id) || [],\n          adult: movie.adult || false,\n          backdropPath: movie.backdropPath || \"\",\n          originalLanguage: movie.originalLanguage || \"\",\n          originalTitle: movie.originalTitle || \"\",\n          overview: movie.overview || \"\",\n          popularity: movie.popularity || 0,\n          video: movie.video || false,\n          voteAverage: movie.voteAverage || 0,\n          voteCount: movie.voteCount || 0,\n        };\n\n        await saveMovie({\n          variables: {\n            movie: movieObj,\n          },\n        });\n\n        return true;\n      } catch (error) {\n        console.error(\"Error saving movie:\", error);\n        return false;\n      } finally {\n        setSavedMoviesLoading(false);\n      }\n    }\n  };\n\n  const removeMovieFromSaved = async movie => {\n    setSavedMoviesLoading(true);\n    try {\n      await removeMovie({\n        variables: {\n          id: movie.id,\n        },\n      });\n      setSavedMovies(prevMovies => {\n        const updatedMovies = prevMovies.filter(m => {\n          const movieIdCheck = m.movieId\n            ? String(m.movieId) !== String(movie.id)\n            : true;\n          return String(m.id) !== String(movie.id) && movieIdCheck;\n        });\n\n        return updatedMovies;\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error removing movie:\", error);\n      return false;\n    } finally {\n      setSavedMoviesLoading(false);\n    }\n  };\n\n  return {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n    loading,\n    error,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const MOVIES_QUERY = gql`\n  query Movies($filter: MoviesFilterInput) {\n    movies(filter: $filter) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        title\n        image: posterPath\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport {\n  MovieCard,\n  SelectedMoviesSection,\n  Filters,\n  Paginator,\n  MovieDetailModal,\n  ServerError,\n} from \"../../components\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { MOVIES_QUERY } from \"./queries\";\n\nimport { useMovies } from \"../../hooks/useMovies\";\nimport { useCustomNotification } from \"../../hooks/useCustomNotification\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport renderSkeletons from \"../../utils/renderSkeletons\";\n\nimport { useFilters } from \"../../hooks/useFilters\";\nimport { framerListVariants } from \"../../constants\";\nimport { FormattedMessage } from \"react-intl\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { useSavedMovies } from \"../../hooks/useSavedMovies\";\n\nconst genres = [\n  // {\n  //   id: null,\n  //   name: \"All Genres\",\n  // },\n  {\n    id: 28,\n    name: \"Action\",\n  },\n  {\n    id: 12,\n    name: \"Adventure\",\n  },\n  {\n    id: 16,\n    name: \"Animation\",\n  },\n  {\n    id: 35,\n    name: \"Comedy\",\n  },\n  {\n    id: 80,\n    name: \"Crime\",\n  },\n  {\n    id: 99,\n    name: \"Documentary\",\n  },\n  {\n    id: 18,\n    name: \"Drama\",\n  },\n  {\n    id: 10751,\n    name: \"Family\",\n  },\n  {\n    id: 14,\n    name: \"Fantasy\",\n  },\n  {\n    id: 36,\n    name: \"History\",\n  },\n  {\n    id: 27,\n    name: \"Horror\",\n  },\n  {\n    id: 10402,\n    name: \"Music\",\n  },\n  {\n    id: 9648,\n    name: \"Mystery\",\n  },\n  {\n    id: 10749,\n    name: \"Romance\",\n  },\n  {\n    id: 878,\n    name: \"Science Fiction\",\n  },\n  {\n    id: 10770,\n    name: \"TV Movie\",\n  },\n  {\n    id: 53,\n    name: \"Thriller\",\n  },\n  {\n    id: 10752,\n    name: \"War\",\n  },\n  {\n    id: 37,\n    name: \"Western\",\n  },\n];\n\nconst startYear = 1900;\nconst currentYear = new Date().getFullYear();\nconst years = Array.from(\n  { length: currentYear - startYear + 1 },\n  (_, i) => currentYear - i\n);\n\nconst Home = () => {\n  const {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n  } = useSavedMovies();\n\n  const { state } = React.useContext(AppContext);\n  const { filter, setPage, setFilter } = useFilters();\n  const { selectedMovies, selectMovie, deleteMovie } = useMovies();\n  const [movieId, setMovieId] = React.useState(\"\");\n\n  const [moviesList, setmoviesList] = React.useState([]);\n  const { showNotification, NotificationComponent } = useCustomNotification();\n  const { loading, error, data } = useQuery(MOVIES_QUERY, {\n    variables: {\n      filter: {\n        page: filter.page,\n        sortBy: filter.sortBy,\n        sortDirection: filter.sortDirection,\n        year: filter.year,\n        genre: filter.genre,\n        search: filter.search,\n      },\n    },\n  });\n\n  React.useEffect(() => {\n    if (data?.movies?.results?.length > 0)\n      setmoviesList(prevState => {\n        return data.movies.results.map(newMovie => {\n          const oldMovie = prevState.find(movie => movie.id === newMovie.id);\n\n          return {\n            ...newMovie,\n            image: oldMovie ? oldMovie.image : newMovie.image,\n          };\n        });\n      });\n    else setmoviesList([]);\n  }, [data]);\n\n  const addFavoriteMovie = async movie => {\n    const result = await addMovieToSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in saving movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_add_to_favorite_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const removeFavoriteMovie = async movie => {\n    const result = await removeMovieFromSaved(movie);\n    if (!result) {\n      showNotification(\"Error in removing movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const paginationHandler = (event, page) => {\n    setPage(page);\n    setTimeout(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\",\n      });\n    }, 100);\n  };\n\n  const selectMovieHandler = movie => {\n    const length = selectedMovies.length;\n    const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n    switch (true) {\n      case !isNewMovie:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_already_selected\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      case length >= SELECTED_MOVIES_LIMIT:\n        showNotification(\n          <FormattedMessage id=\"notification.list_limit_reached\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_added_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    selectMovie(movie);\n  };\n\n  const deleteMovieHandler = movie => {\n    switch (true) {\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    deleteMovie(movie);\n  };\n\n  const handleFilterSubmit = values => {\n    setFilter(values);\n  };\n\n  const onCloseConfirmModal = () => {\n    setMovieId(\"\");\n  };\n\n  if (error) {\n    console.log(`error in home page: ${error}`);\n    return <ServerError />;\n  }\n  return (\n    <Box sx={{ flexGrow: 1, marginTop: 2 }}>\n      <MovieDetailModal\n        user={state.user || null}\n        title={movieId}\n        movieId={movieId}\n        open={!!movieId}\n        onClose={onCloseConfirmModal}\n        selectedMovies={selectedMovies}\n        selectMovie={selectMovieHandler}\n        deleteMovie={deleteMovieHandler}\n        addFavoriteMovie={addFavoriteMovie}\n        removeFavoriteMovie={removeFavoriteMovie}\n        savedMovies={savedMovies}\n        savedMoviesLoading={savedMoviesLoading}\n      />\n\n      {NotificationComponent}\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Filters\n            initialValues={filter}\n            onSubmit={handleFilterSubmit}\n            genres={genres}\n            years={years}\n          />\n        </Grid>\n        <Grid item xs={12} md={8}>\n          <Paper>\n            <Box sx={{ flexGrow: 1, padding: 2 }}>\n              {loading && renderSkeletons({ favoriteMode: false })}\n              {moviesList && moviesList.length > 0 && (\n                <Grid container spacing={2}>\n                  {moviesList.map((movie, index) => (\n                    <Grid key={movie.id} item xs={12} md={4} lg={3}>\n                      <motion.div\n                        className=\"portfolio__item\"\n                        variants={framerListVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        custom={index}\n                      >\n                        <MovieCard\n                          movie={movie}\n                          onCardSelect={selectMovieHandler}\n                          openMovieDetailsById={setMovieId}\n                          selected={selectedMovies.find(\n                            ({ id }) => id === movie.id\n                          )}\n                          favorites={savedMovies.find(\n                            ({ id, movieId }) =>\n                              id === movie.id || movie.id === movieId\n                          )}\n                        />\n                      </motion.div>\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n            </Box>\n            <Box\n              mt={2}\n              pb={2}\n              sx={{ display: \"flex\", justifyContent: \"center\" }}\n            >\n              <Paginator\n                totalPages={\n                  Number(data?.movies?.totalPages) > 500\n                    ? 500\n                    : data?.movies?.totalPages || 1\n                }\n                page={filter.page}\n                paginationHandler={paginationHandler}\n              />\n            </Box>\n          </Paper>\n        </Grid>\n\n        <Grid key=\"Selected Movie\" item xs={12} md={4}>\n          <SelectedMoviesSection\n            selectedMovies={selectedMovies}\n            onCardDelete={deleteMovieHandler}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Home;\n","import { useCallback, useState } from \"react\";\nimport { SORT_DIRECTION } from \"../../constants\";\n\nexport const useFilters = () => {\n  const [filter, setFilterFields] = useState({\n    page: 1,\n    sortBy: \"popularity\",\n    sortDirection: SORT_DIRECTION.DESC,\n    search: \"\",\n  });\n\n  const setPage = useCallback(\n    page => {\n      setFilterFields({ ...filter, page });\n    },\n    [filter]\n  );\n\n  const setFilter = useCallback(\n    // filterFields => {\n    //   setFilterFields({\n    //     ...filter,\n    //     ...filterFields,\n    //     year: +filterFields.year,\n    //     genre: filterFields.genre === \"\" ? NaN : filterFields.genre,\n    //     primaryReleaseYear: +filterFields.primaryReleaseYear,\n    //   });\n    // },\n    filterFields => {\n      setFilterFields({\n        ...filter,\n        ...filterFields,\n        page:\n          filter.search !== filterFields.search ||\n          filter.genre !== filterFields.genre ||\n          filter.year !== filterFields.year\n            ? 1\n            : filterFields.page,\n        year: +filterFields.year,\n        genre: filterFields.genre === \"\" ? NaN : filterFields.genre,\n        primaryReleaseYear: +filterFields.primaryReleaseYear,\n      });\n    },\n    [filter]\n  );\n  return {\n    filter,\n    setPage,\n    setFilter,\n  };\n};\n","import { Grid, Skeleton } from \"@mui/material\";\n\nconst renderSkeletons = ({ favoriteMode = false }) => {\n  return (\n    <Grid container spacing={2}>\n      {Array.from(new Array(8)).map((_, index) => (\n        <Grid\n          key={index}\n          item\n          xs={12}\n          md={favoriteMode ? 3 : 4}\n          lg={favoriteMode ? 2 : 3}\n        >\n          <Skeleton variant=\"rectangular\" height={431} />\n          <Skeleton variant=\"text\" height={32} />\n          <Skeleton variant=\"text\" height={32} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default renderSkeletons;\n"],"names":["SELECTED_MOVIES_LIMIT","useMovies","selectedMovies","setSelectedMovies","useState","useLayoutEffect","savedSelectedMovies","getFromStorage","SELECTED_MOVIES_KEY","selectMovie","useCallback","movie","length","isNewMovie","find","_ref","id","console","log","prevMovies","updatedMovies","saveToStorage","deleteMovie","prevState","filter","_ref2","GET_SAVED_MOVIES","gql","SAVE_MOVIE","REMOVE_MOVIE","useSavedMovies","state","useContext","AppContext","savedMoviesLoading","setSavedMoviesLoading","saveMovie","useMutation","loading","error","data","refetch","useQuery","variables","page","all","removeMovie","savedMovies","setSavedMovies","user","getSavedMovies","results","addMovieToSaved","async","movieId","_movie$genres","movieObj","title","releaseDate","image","genres","map","m","adult","backdropPath","originalLanguage","originalTitle","overview","popularity","video","voteAverage","voteCount","removeMovieFromSaved","movieIdCheck","String","MOVIES_QUERY","name","currentYear","Date","getFullYear","years","Array","from","_","i","Home","_data$movies2","_data$movies3","React","setPage","setFilter","useFilters","setFilterFields","sortBy","sortDirection","SORT_DIRECTION","DESC","search","filterFields","genre","year","NaN","primaryReleaseYear","setMovieId","moviesList","setmoviesList","showNotification","NotificationComponent","useCustomNotification","_data$movies","_data$movies$results","movies","newMovie","oldMovie","selectMovieHandler","_jsx","FormattedMessage","vertical","horizontal","deleteMovieHandler","ServerError","_jsxs","Box","sx","flexGrow","marginTop","children","MovieDetailModal","open","onClose","onCloseConfirmModal","addFavoriteMovie","removeFavoriteMovie","Grid","container","spacing","item","xs","Filters","initialValues","onSubmit","values","md","Paper","padding","renderSkeletons","favoriteMode","index","lg","motion","div","className","variants","framerListVariants","initial","animate","custom","MovieCard","onCardSelect","openMovieDetailsById","selected","favorites","_ref3","mt","pb","display","justifyContent","Paginator","totalPages","Number","paginationHandler","event","setTimeout","window","scrollTo","top","behavior","SelectedMoviesSection","onCardDelete","Skeleton","variant","height"],"sourceRoot":""}