{"version":3,"file":"static/js/81.e1d89e9d.chunk.js","mappings":"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","sources":["pages/Favorites/queries.js","pages/Favorites/index.js","utils/renderSkeletons.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int) {\n    getSavedMovies(page: $page, perPage: 12) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n","import { useQuery } from \"@apollo/client\";\nimport { GET_SAVED_MOVIES } from \"./queries\";\nimport { useEffect, useState } from \"react\";\nimport { MovieCard, Paginator, ServerError } from \"../../components\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport { motion } from \"framer-motion\";\nimport renderSkeletons from \"../../utils/renderSkeletons\";\nimport { framerListVariants } from \"../../constants\";\n\nconst Favorites = () => {\n  const [moviesList, setMoviesList] = useState([]);\n  const [page, setPage] = useState(1);\n  const [boxMinHeight, setBoxMinHeight] = useState();\n  const { loading, error, data } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page },\n  });\n\n  useEffect(() => {\n    if (data?.getSavedMovies?.results?.length > 0) {\n      console.log(\n        `data?.getSavedMovies?.results`,\n        data?.getSavedMovies?.results\n      );\n      setMoviesList(prevState => {\n        return data.getSavedMovies.results.map(newMovie => {\n          const oldMovie = prevState.find(movie => movie.id === newMovie.id);\n          return {\n            ...newMovie,\n            image: oldMovie ? oldMovie.image : newMovie.image,\n          };\n        });\n      });\n    } else setMoviesList([]);\n  }, [data]);\n\n  useEffect(() => {\n    // Dynamically find the header and calculate its height\n    const headerElement = document.querySelector(\"header\");\n    const footerElement = document.querySelector(\"footer\");\n\n    if (headerElement) {\n      const headerHeight = headerElement.offsetHeight;\n      const footerHeight = footerElement.offsetHeight;\n      setBoxMinHeight(`calc(100vh - ${headerHeight + footerHeight}px)`);\n    }\n  }, []);\n\n  const paginationHandler = (event, page) => {\n    setPage(page);\n    setTimeout(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\",\n      });\n    }, 100);\n  };\n\n  if (error) {\n    return <ServerError />;\n  }\n\n  return (\n    <Box\n      sx={{\n        minHeight: boxMinHeight,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: 3,\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      <dix style={{ height: \"80%\" }}></dix>\n\n      <Grid item xs={12} md={8} sx={{ width: \"100%\" }}>\n        <Paper sx={{ padding: 2, minHeight: \"400px\" }}>\n          <Box sx={{ flexGrow: 1, marginBottom: \"16px\" }}>\n            {loading && renderSkeletons()}\n            {moviesList && (\n              <Grid container spacing={2}>\n                {moviesList.map((movie, index) => (\n                  <Grid key={movie.id} item xs={12} md={3} lg={2}>\n                    <motion.div\n                      className=\"portfolio__item\"\n                      variants={framerListVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      custom={index}\n                    >\n                      <MovieCard\n                        movie={movie}\n                        onCardSelect={() => console.log(`onCardSelect`)}\n                        // openMovieDetailsById={setMovieId}\n                        isPreviewMode\n                      />\n                    </motion.div>\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </Box>\n          {moviesList.length > 0 && (\n            <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n              <Paginator\n                totalPages={\n                  Number(data?.getSavedMovies?.totalPages) > 500\n                    ? 500\n                    : data?.getSavedMovies?.totalPages || 1\n                }\n                page={page}\n                paginationHandler={paginationHandler}\n              />\n            </Box>\n          )}\n        </Paper>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Favorites;\n","import { Grid, Skeleton } from \"@mui/material\";\n\nconst renderSkeletons = () => {\n  return (\n    <Grid container spacing={2}>\n      {Array.from(new Array(8)).map((_, index) => (\n        <Grid key={index} item xs={12} md={4} lg={3}>\n          <Skeleton variant=\"rectangular\" height={431} />\n          <Skeleton variant=\"text\" height={32} />\n          <Skeleton variant=\"text\" height={32} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default renderSkeletons;\n"],"names":["GET_SAVED_MOVIES","gql","Favorites","_data$getSavedMovies3","_data$getSavedMovies4","moviesList","setMoviesList","useState","page","setPage","boxMinHeight","setBoxMinHeight","loading","error","data","useQuery","variables","useEffect","_data$getSavedMovies","_data$getSavedMovies$","_data$getSavedMovies2","getSavedMovies","results","length","console","log","prevState","map","newMovie","oldMovie","find","movie","id","image","headerElement","document","querySelector","footerElement","headerHeight","offsetHeight","footerHeight","_jsx","ServerError","_jsxs","Box","sx","minHeight","display","flexDirection","alignItems","padding","backgroundColor","children","style","height","Grid","item","xs","md","width","Paper","flexGrow","marginBottom","renderSkeletons","container","spacing","index","lg","motion","div","className","variants","framerListVariants","initial","animate","custom","MovieCard","onCardSelect","isPreviewMode","justifyContent","Paginator","totalPages","Number","paginationHandler","event","setTimeout","window","scrollTo","top","behavior","Array","from","_","Skeleton","variant"],"sourceRoot":""}