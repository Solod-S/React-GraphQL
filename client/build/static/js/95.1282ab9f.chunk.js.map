{"version":3,"file":"static/js/95.1282ab9f.chunk.js","mappings":"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","sources":["hooks/useSavedMovies/queries.js","hooks/useSavedMovies/index.js","pages/Home/queries.js","pages/Home/index.js","hooks/useFilters/index.js","hooks/useMovies/index.js","config/index.js","utils/renderSkeletons.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int) {\n    getSavedMovies(page: $page) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n  mutation SaveMovie($movie: MovieInput!) {\n    saveMovie(movie: $movie) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n      voteAverage\n      voteCount\n    }\n  }\n`;\n\nexport const REMOVE_MOVIE = gql`\n  mutation RemoveMovie($id: ID!) {\n    removeMovie(id: $id) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n    }\n  }\n`;\n","import { useContext, useLayoutEffect, useState } from \"react\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { GET_SAVED_MOVIES, SAVE_MOVIE, REMOVE_MOVIE } from \"./queries\";\nimport { useMutation, useQuery } from \"@apollo/client\";\n\nexport const useSavedMovies = () => {\n  const { state } = useContext(AppContext);\n  const [savedMoviesLoading, setSavedMoviesLoading] = useState(false);\n  const [saveMovie] = useMutation(SAVE_MOVIE);\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page: 1 },\n    // skip: true, // Изначально пропускаем запрос\n  });\n  const [removeMovie] = useMutation(REMOVE_MOVIE);\n  const [savedMovies, setSavedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    if (state.user) {\n      // Если пользователь существует, запускаем refetch для получения данных\n      refetch();\n    }\n  }, [state.user, refetch]);\n\n  useLayoutEffect(() => {\n    if (data && data?.getSavedMovies) {\n      console.log(`render`);\n      setSavedMovies(data.getSavedMovies.results); // Устанавливаем фильмы, когда есть данные\n    }\n  }, [data]);\n\n  const addMovieToSaved = async movie => {\n    setSavedMoviesLoading(true);\n    const isNewMovie = !savedMovies.find(({ id }) => id === movie.id);\n    if (isNewMovie) {\n      setSavedMovies(prevMovies => {\n        const updatedMovies = [...prevMovies, { ...movie, movieId: movie.id }];\n        return updatedMovies;\n      });\n\n      try {\n        const movieObj = {\n          id: movie.id,\n          title: movie.title,\n          releaseDate: movie.releaseDate,\n          posterPath: movie.image || \"\",\n          genres: movie?.genres?.map(m => m.id) || [],\n          adult: movie.adult || false,\n          backdropPath: movie.backdropPath || \"\",\n          originalLanguage: movie.originalLanguage || \"\",\n          originalTitle: movie.originalTitle || \"\",\n          overview: movie.overview || \"\",\n          popularity: movie.popularity || 0,\n          video: movie.video || false,\n          voteAverage: movie.voteAverage || 0,\n          voteCount: movie.voteCount || 0,\n        };\n        await saveMovie({\n          variables: {\n            movie: movieObj,\n          },\n        });\n        return true;\n      } catch (error) {\n        console.error(\"Error saving movie:\", error);\n        return false;\n      } finally {\n        setSavedMoviesLoading(false);\n      }\n    }\n  };\n\n  const removeMovieFromSaved = async movie => {\n    setSavedMoviesLoading(true);\n    try {\n      await removeMovie({\n        variables: {\n          id: movie.id,\n        },\n      });\n      setSavedMovies(prevMovies => {\n        const updatedMovies = prevMovies.filter(m => {\n          const movieIdCheck = m.movieId\n            ? String(m.movieId) !== String(movie.id)\n            : true;\n          return String(m.id) !== String(movie.id) && movieIdCheck;\n        });\n\n        return updatedMovies;\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error removing movie:\", error);\n      return false;\n    } finally {\n      setSavedMoviesLoading(false);\n    }\n  };\n\n  return {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n    loading,\n    error,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nexport const MOVIES_QUERY = gql`\n  query Movies($filter: MoviesFilterInput) {\n    movies(filter: $filter) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        title\n        image: posterPath\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n","import * as React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport {\n  MovieCard,\n  SelectedMoviesSection,\n  Filters,\n  Paginator,\n  MovieDetailModal,\n  ServerError,\n} from \"../../components\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { MOVIES_QUERY } from \"./queries\";\n\nimport { useMovies } from \"../../hooks/useMovies\";\nimport { useCustomNotification } from \"../../hooks/useCustomNotification\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport renderSkeletons from \"../../utils/renderSkeletons\";\n\nimport { useFilters } from \"../../hooks/useFilters\";\nimport { framerListVariants } from \"../../constants\";\nimport { FormattedMessage } from \"react-intl\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { useSavedMovies } from \"../../hooks/useSavedMovies\";\n\nconst genres = [\n  // {\n  //   id: null,\n  //   name: \"All Genres\",\n  // },\n  {\n    id: 28,\n    name: \"Action\",\n  },\n  {\n    id: 12,\n    name: \"Adventure\",\n  },\n  {\n    id: 16,\n    name: \"Animation\",\n  },\n  {\n    id: 35,\n    name: \"Comedy\",\n  },\n  {\n    id: 80,\n    name: \"Crime\",\n  },\n  {\n    id: 99,\n    name: \"Documentary\",\n  },\n  {\n    id: 18,\n    name: \"Drama\",\n  },\n  {\n    id: 10751,\n    name: \"Family\",\n  },\n  {\n    id: 14,\n    name: \"Fantasy\",\n  },\n  {\n    id: 36,\n    name: \"History\",\n  },\n  {\n    id: 27,\n    name: \"Horror\",\n  },\n  {\n    id: 10402,\n    name: \"Music\",\n  },\n  {\n    id: 9648,\n    name: \"Mystery\",\n  },\n  {\n    id: 10749,\n    name: \"Romance\",\n  },\n  {\n    id: 878,\n    name: \"Science Fiction\",\n  },\n  {\n    id: 10770,\n    name: \"TV Movie\",\n  },\n  {\n    id: 53,\n    name: \"Thriller\",\n  },\n  {\n    id: 10752,\n    name: \"War\",\n  },\n  {\n    id: 37,\n    name: \"Western\",\n  },\n];\n\nconst startYear = 1900;\nconst currentYear = new Date().getFullYear();\nconst years = Array.from(\n  { length: currentYear - startYear + 1 },\n  (_, i) => currentYear - i\n);\n\nconst Home = () => {\n  const {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n  } = useSavedMovies();\n\n  const { state } = React.useContext(AppContext);\n  const { filter, setPage, setFilter } = useFilters();\n  const { selectedMovies, selectMovie, deleteMovie } = useMovies();\n  const [movieId, setMovieId] = React.useState(\"\");\n\n  const [moviesList, setmoviesList] = React.useState([]);\n  const { showNotification, NotificationComponent } = useCustomNotification();\n  const { loading, error, data } = useQuery(MOVIES_QUERY, {\n    variables: {\n      filter: {\n        page: filter.page,\n        sortBy: filter.sortBy,\n        sortDirection: filter.sortDirection,\n        year: filter.year,\n        genre: filter.genre,\n        search: filter.search,\n      },\n    },\n  });\n\n  React.useEffect(() => {\n    if (data?.movies?.results.length > 0)\n      setmoviesList(prevState => {\n        return data.movies.results.map(newMovie => {\n          const oldMovie = prevState.find(movie => movie.id === newMovie.id);\n\n          return {\n            ...newMovie,\n            image: oldMovie ? oldMovie.image : newMovie.image,\n          };\n        });\n      });\n    else setmoviesList([]);\n  }, [data]);\n\n  const addFavoriteMovie = async movie => {\n    const result = await addMovieToSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in saving movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_add_to_favorite_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const removeFavoriteMovie = async movie => {\n    const result = await removeMovieFromSaved(movie);\n    if (!result) {\n      showNotification(\"Error in removing movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const paginationHandler = (event, page) => {\n    setPage(page);\n    setTimeout(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\",\n      });\n    }, 100);\n  };\n\n  const selectMovieHandler = movie => {\n    const length = selectedMovies.length;\n    const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n    switch (true) {\n      case !isNewMovie:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_already_selected\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      case length >= SELECTED_MOVIES_LIMIT:\n        showNotification(\n          <FormattedMessage id=\"notification.list_limit_reached\" />,\n          \"error\",\n          5000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        return;\n\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_added_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    selectMovie(movie);\n  };\n\n  const deleteMovieHandler = movie => {\n    switch (true) {\n      default:\n        showNotification(\n          <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n          \"success\",\n          1000,\n          {\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }\n        );\n        break;\n    }\n\n    deleteMovie(movie);\n  };\n\n  const handleFilterSubmit = values => {\n    setFilter(values);\n  };\n\n  const onCloseConfirmModal = () => {\n    setMovieId(\"\");\n  };\n\n  if (error) {\n    return <ServerError />;\n    // return `Error: ${error.message}`;\n  }\n  return (\n    <Box sx={{ flexGrow: 1, marginTop: 2 }}>\n      <MovieDetailModal\n        user={state.user || null}\n        title={movieId}\n        movieId={movieId}\n        open={!!movieId}\n        onClose={onCloseConfirmModal}\n        selectedMovies={selectedMovies}\n        selectMovie={selectMovieHandler}\n        deleteMovie={deleteMovieHandler}\n        addFavoriteMovie={addFavoriteMovie}\n        removeFavoriteMovie={removeFavoriteMovie}\n        savedMovies={savedMovies}\n        savedMoviesLoading={savedMoviesLoading}\n      />\n\n      {NotificationComponent}\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Filters\n            initialValues={filter}\n            onSubmit={handleFilterSubmit}\n            genres={genres}\n            years={years}\n          />\n        </Grid>\n        <Grid item xs={12} md={8}>\n          <Paper>\n            <Box sx={{ flexGrow: 1, padding: 2 }}>\n              {loading && renderSkeletons()}\n              {moviesList && moviesList.length > 0 && (\n                <Grid container spacing={2}>\n                  {moviesList.map((movie, index) => (\n                    <Grid key={movie.id} item xs={12} md={4} lg={3}>\n                      <motion.div\n                        className=\"portfolio__item\"\n                        variants={framerListVariants}\n                        initial=\"hidden\"\n                        animate=\"visible\"\n                        custom={index}\n                      >\n                        <MovieCard\n                          movie={movie}\n                          onCardSelect={selectMovieHandler}\n                          openMovieDetailsById={setMovieId}\n                          selected={selectedMovies.find(\n                            ({ id }) => id === movie.id\n                          )}\n                          favorites={savedMovies.find(\n                            ({ id, movieId }) =>\n                              id === movie.id || movie.id === movieId\n                          )}\n                        />\n                      </motion.div>\n                    </Grid>\n                  ))}\n                </Grid>\n              )}\n            </Box>\n            <Box\n              mt={2}\n              pb={2}\n              sx={{ display: \"flex\", justifyContent: \"center\" }}\n            >\n              <Paginator\n                totalPages={\n                  Number(data?.movies?.totalPages) > 500\n                    ? 500\n                    : data?.movies?.totalPages || 1\n                }\n                page={filter.page}\n                paginationHandler={paginationHandler}\n              />\n            </Box>\n          </Paper>\n        </Grid>\n\n        <Grid key=\"Selected Movie\" item xs={12} md={4}>\n          <SelectedMoviesSection\n            selectedMovies={selectedMovies}\n            onCardDelete={deleteMovieHandler}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Home;\n","import { useCallback, useState } from \"react\";\nimport { SORT_DIRECTION } from \"../../constants\";\n\nexport const useFilters = () => {\n  const [filter, setFilterFields] = useState({\n    page: 1,\n    sortBy: \"popularity\",\n    sortDirection: SORT_DIRECTION.DESC,\n    search: \"\",\n  });\n\n  const setPage = useCallback(\n    page => {\n      setFilterFields({ ...filter, page });\n    },\n    [filter]\n  );\n\n  const setFilter = useCallback(\n    // filterFields => {\n    //   setFilterFields({\n    //     ...filter,\n    //     ...filterFields,\n    //     year: +filterFields.year,\n    //     genre: filterFields.genre === \"\" ? NaN : filterFields.genre,\n    //     primaryReleaseYear: +filterFields.primaryReleaseYear,\n    //   });\n    // },\n    filterFields => {\n      setFilterFields({\n        ...filter,\n        ...filterFields,\n        page:\n          filter.search !== filterFields.search ||\n          filter.genre !== filterFields.genre ||\n          filter.year !== filterFields.year\n            ? 1\n            : filterFields.page,\n        year: +filterFields.year,\n        genre: filterFields.genre === \"\" ? NaN : filterFields.genre,\n        primaryReleaseYear: +filterFields.primaryReleaseYear,\n      });\n    },\n    [filter]\n  );\n  return {\n    filter,\n    setPage,\n    setFilter,\n  };\n};\n","import { useCallback, useLayoutEffect, useState } from \"react\";\nimport { SELECTED_MOVIES_LIMIT } from \"../../config\";\nimport { saveToStorage, getFromStorage } from \"../../utils/localStorage\";\nimport { SELECTED_MOVIES_KEY } from \"../../constants\";\n\nexport const useMovies = () => {\n  const [selectedMovies, setSelectedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    const savedSelectedMovies = getFromStorage(SELECTED_MOVIES_KEY);\n    if (savedSelectedMovies) {\n      setSelectedMovies(savedSelectedMovies);\n    }\n  }, []);\n\n  const selectMovie = useCallback(\n    movie => {\n      const length = selectedMovies.length;\n      const isNewMovie = !selectedMovies.find(({ id }) => id === movie.id);\n\n      if (isNewMovie && length < SELECTED_MOVIES_LIMIT) {\n        setSelectedMovies(prevMovies => {\n          const updatedMovies = [...prevMovies, movie];\n          saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n          return updatedMovies;\n        });\n      }\n    },\n    [selectedMovies]\n  );\n\n  const deleteMovie = useCallback(\n    movie => {\n      setSelectedMovies(prevState => {\n        const updatedMovies = prevState.filter(({ id }) => id !== movie.id);\n        saveToStorage(SELECTED_MOVIES_KEY, updatedMovies);\n        return updatedMovies;\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selectedMovies]\n  );\n\n  return {\n    selectedMovies,\n    selectMovie,\n    deleteMovie,\n  };\n};\n","export const SELECTED_MOVIES_LIMIT = 12;\n","import { Grid, Skeleton } from \"@mui/material\";\n\nconst renderSkeletons = () => {\n  return (\n    <Grid container spacing={2}>\n      {Array.from(new Array(8)).map((_, index) => (\n        <Grid key={index} item xs={12} md={4} lg={3}>\n          <Skeleton variant=\"rectangular\" height={431} />\n          <Skeleton variant=\"text\" height={32} />\n          <Skeleton variant=\"text\" height={32} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default renderSkeletons;\n"],"names":["GET_SAVED_MOVIES","gql","SAVE_MOVIE","REMOVE_MOVIE","useSavedMovies","state","useContext","AppContext","savedMoviesLoading","setSavedMoviesLoading","useState","saveMovie","useMutation","loading","error","data","refetch","useQuery","variables","page","removeMovie","savedMovies","setSavedMovies","useLayoutEffect","user","getSavedMovies","console","log","results","addMovieToSaved","async","find","_ref","id","movie","prevMovies","movieId","_movie$genres","movieObj","title","releaseDate","posterPath","image","genres","map","m","adult","backdropPath","originalLanguage","originalTitle","overview","popularity","video","voteAverage","voteCount","removeMovieFromSaved","filter","movieIdCheck","String","MOVIES_QUERY","name","currentYear","Date","getFullYear","years","Array","from","length","_","i","Home","_data$movies2","_data$movies3","React","setPage","setFilter","useFilters","setFilterFields","sortBy","sortDirection","SORT_DIRECTION","DESC","search","useCallback","filterFields","genre","year","NaN","primaryReleaseYear","selectedMovies","selectMovie","deleteMovie","useMovies","setSelectedMovies","savedSelectedMovies","getFromStorage","SELECTED_MOVIES_KEY","updatedMovies","saveToStorage","prevState","_ref2","setMovieId","moviesList","setmoviesList","showNotification","NotificationComponent","useCustomNotification","_data$movies","movies","newMovie","oldMovie","selectMovieHandler","_jsx","FormattedMessage","vertical","horizontal","deleteMovieHandler","ServerError","_jsxs","Box","sx","flexGrow","marginTop","children","MovieDetailModal","open","onClose","onCloseConfirmModal","addFavoriteMovie","removeFavoriteMovie","Grid","container","spacing","item","xs","Filters","initialValues","onSubmit","values","md","Paper","padding","renderSkeletons","index","lg","motion","div","className","variants","framerListVariants","initial","animate","custom","MovieCard","onCardSelect","openMovieDetailsById","selected","favorites","_ref3","mt","pb","display","justifyContent","Paginator","totalPages","Number","paginationHandler","event","setTimeout","window","scrollTo","top","behavior","SelectedMoviesSection","onCardDelete","Skeleton","variant","height"],"sourceRoot":""}