{"version":3,"file":"static/js/323.9f06f9a2.chunk.js","mappings":"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","sources":["hooks/useSavedMovies/queries.js","hooks/useSavedMovies/index.js","pages/Recommendation/queries.js","pages/Recommendation/index.js","utils/renderSkeletons.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_SAVED_MOVIES = gql`\n  query GetSavedMovies($page: Int) {\n    getSavedMovies(page: $page) {\n      page\n      totalResults\n      totalPages\n      results {\n        id\n        movieId\n        title\n        image\n        releaseDate(format: \"dd.MM.yyyy\")\n        voteAverage\n        voteCount\n      }\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n  mutation SaveMovie($movie: MovieInput!) {\n    saveMovie(movie: $movie) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n      voteAverage\n      voteCount\n    }\n  }\n`;\n\nexport const REMOVE_MOVIE = gql`\n  mutation RemoveMovie($id: ID!) {\n    removeMovie(id: $id) {\n      id\n      movieId\n      title\n      releaseDate(format: \"dd.MM.yyyy\")\n      image\n    }\n  }\n`;\n","import { useContext, useLayoutEffect, useState } from \"react\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { GET_SAVED_MOVIES, SAVE_MOVIE, REMOVE_MOVIE } from \"./queries\";\nimport { useMutation, useQuery } from \"@apollo/client\";\n\nexport const useSavedMovies = () => {\n  const { state } = useContext(AppContext);\n  const [savedMoviesLoading, setSavedMoviesLoading] = useState(false);\n  const [saveMovie] = useMutation(SAVE_MOVIE);\n  const { loading, error, data, refetch } = useQuery(GET_SAVED_MOVIES, {\n    variables: { page: 1 },\n    // skip: true, // Изначально пропускаем запрос\n  });\n  const [removeMovie] = useMutation(REMOVE_MOVIE);\n  const [savedMovies, setSavedMovies] = useState([]);\n\n  useLayoutEffect(() => {\n    if (state.user) {\n      // Если пользователь существует, запускаем refetch для получения данных\n      refetch();\n    }\n  }, [state.user, refetch]);\n\n  useLayoutEffect(() => {\n    if (data && data?.getSavedMovies) {\n      setSavedMovies(data.getSavedMovies.results); // Устанавливаем фильмы, когда есть данные\n    }\n  }, [data]);\n\n  const addMovieToSaved = async movie => {\n    setSavedMoviesLoading(true);\n    const isNewMovie = !savedMovies.find(({ id }) => id === movie.id);\n\n    if (isNewMovie) {\n      setSavedMovies(prevMovies => {\n        const updatedMovies = [...prevMovies, { ...movie, movieId: movie.id }];\n        return updatedMovies;\n      });\n\n      try {\n        const movieObj = {\n          id: movie.id,\n          title: movie.title,\n          releaseDate: movie.releaseDate,\n          image: movie.image || \"\",\n          genres: movie?.genres?.map(m => m.id) || [],\n          adult: movie.adult || false,\n          backdropPath: movie.backdropPath || \"\",\n          originalLanguage: movie.originalLanguage || \"\",\n          originalTitle: movie.originalTitle || \"\",\n          overview: movie.overview || \"\",\n          popularity: movie.popularity || 0,\n          video: movie.video || false,\n          voteAverage: movie.voteAverage || 0,\n          voteCount: movie.voteCount || 0,\n        };\n\n        await saveMovie({\n          variables: {\n            movie: movieObj,\n          },\n        });\n\n        return true;\n      } catch (error) {\n        console.error(\"Error saving movie:\", error);\n        return false;\n      } finally {\n        setSavedMoviesLoading(false);\n      }\n    }\n  };\n\n  const removeMovieFromSaved = async movie => {\n    setSavedMoviesLoading(true);\n    try {\n      await removeMovie({\n        variables: {\n          id: movie.id,\n        },\n      });\n      setSavedMovies(prevMovies => {\n        const updatedMovies = prevMovies.filter(m => {\n          const movieIdCheck = m.movieId\n            ? String(m.movieId) !== String(movie.id)\n            : true;\n          return String(m.id) !== String(movie.id) && movieIdCheck;\n        });\n\n        return updatedMovies;\n      });\n      return true;\n    } catch (error) {\n      console.error(\"Error removing movie:\", error);\n      return false;\n    } finally {\n      setSavedMoviesLoading(false);\n    }\n  };\n\n  return {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n    loading,\n    error,\n  };\n};\n","import { gql } from \"@apollo/client\";\n\nconst MOVIES_BY_IDS_QUERY = gql`\n  query MoviesByIds($ids: [Int]) {\n    moviesByIds(ids: $ids) {\n      releaseDate(format: \"dd MMM yyy\")\n      # image: posterPath\n      title\n      id\n      adult\n      backdropPath\n      originalLanguage\n      originalTitle\n      overview\n      popularity\n      video\n      voteAverage\n      voteCount\n    }\n  }\n`;\n\nexport { MOVIES_BY_IDS_QUERY };\n","import { useQuery } from \"@apollo/client\";\nimport { Box, Grid, Paper, Typography } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { MOVIES_BY_IDS_QUERY } from \"./queries\";\nimport { MovieDetailModal, MovieCard, ServerError } from \"../../components\";\nimport renderSkeletons from \"../../utils/renderSkeletons\";\nimport { AppContext } from \"../../providers/appContext\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSavedMovies } from \"../../hooks/useSavedMovies\";\nimport { useCustomNotification } from \"../../hooks/useCustomNotification\";\n\nconst Recommendation = () => {\n  const {\n    savedMovies,\n    addMovieToSaved,\n    removeMovieFromSaved,\n    savedMoviesLoading,\n  } = useSavedMovies();\n  const { state } = useContext(AppContext);\n  const [searchParams] = useSearchParams();\n  const [movieId, setMovieId] = useState(\"\");\n  const [params, setParams] = useState({ title: \"\", ids: [] });\n  const [boxMinHeight, setBoxMinHeight] = useState(\"100vh\");\n  const { showNotification, NotificationComponent } = useCustomNotification();\n\n  const { loading, error, data } = useQuery(MOVIES_BY_IDS_QUERY, {\n    variables: { ids: params.ids },\n  });\n\n  useEffect(() => {\n    const ids = searchParams\n      .get(\"ids\")\n      .split(\",\")\n      .map(id => +id);\n    const title = searchParams.get(\"title\");\n\n    setParams({ title, ids });\n  }, [searchParams]);\n\n  useEffect(() => {\n    // Dynamically find the header and calculate its height\n    const headerElement = document.querySelector(\"header\");\n    const footerElement = document.querySelector(\"footer\");\n\n    if (headerElement) {\n      const headerHeight = headerElement.offsetHeight;\n      const footerHeight = footerElement.offsetHeight;\n      setBoxMinHeight(`calc(100vh - ${headerHeight + footerHeight}px)`);\n    }\n  }, []);\n\n  const onCloseConfirmModal = () => {\n    setMovieId(\"\");\n  };\n\n  const addFavoriteMovie = async movie => {\n    const result = await addMovieToSaved(movie);\n\n    if (!result) {\n      showNotification(\"Error in saving movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_add_to_favorite_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  const removeFavoriteMovie = async movie => {\n    const result = await removeMovieFromSaved(movie);\n    if (!result) {\n      showNotification(\"Error in removing movie\", \"error\", 5000, {\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      });\n    } else {\n      showNotification(\n        <FormattedMessage id=\"notification.movie_removed_successfully\" />,\n        \"success\",\n        1000,\n        {\n          vertical: \"bottom\",\n          horizontal: \"right\",\n        }\n      );\n    }\n  };\n\n  if (error) {\n    return <ServerError />;\n  }\n\n  return (\n    <Box\n      sx={{\n        minHeight: boxMinHeight,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: 3,\n        backgroundColor: \"#f5f5f5\",\n      }}\n    >\n      <MovieDetailModal\n        user={state.user || null}\n        isPreviewMode\n        title={movieId}\n        movieId={movieId}\n        open={!!movieId}\n        onClose={onCloseConfirmModal}\n        addFavoriteMovie={addFavoriteMovie}\n        removeFavoriteMovie={removeFavoriteMovie}\n        savedMovies={savedMovies}\n        savedMoviesLoading={savedMoviesLoading}\n      />\n      <Typography variant=\"h4\" gutterBottom>\n        {params.title ? params.title : \"Recommended Movies\"}\n      </Typography>\n      <Grid item xs={12} md={8} sx={{ width: \"100%\" }}>\n        <Paper sx={{ padding: 2, minHeight: \"400px\" }}>\n          <Box sx={{ flexGrow: 1 }}>\n            {loading && renderSkeletons()}\n            {data && (\n              <Grid container spacing={2}>\n                {data.moviesByIds.map(movie => (\n                  <Grid key={movie.id} item xs={12} md={3} lg={2}>\n                    <MovieCard\n                      movie={movie}\n                      onCardSelect={() => console.log(`onCardSelect`)}\n                      openMovieDetailsById={setMovieId}\n                      isPreviewMode\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </Box>\n        </Paper>\n      </Grid>\n      {NotificationComponent}\n    </Box>\n  );\n};\n\nexport default Recommendation;\n","import { Grid, Skeleton } from \"@mui/material\";\n\nconst renderSkeletons = () => {\n  return (\n    <Grid container spacing={2}>\n      {Array.from(new Array(8)).map((_, index) => (\n        <Grid key={index} item xs={12} md={4} lg={3}>\n          <Skeleton variant=\"rectangular\" height={431} />\n          <Skeleton variant=\"text\" height={32} />\n          <Skeleton variant=\"text\" height={32} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default renderSkeletons;\n"],"names":["GET_SAVED_MOVIES","gql","SAVE_MOVIE","REMOVE_MOVIE","useSavedMovies","state","useContext","AppContext","savedMoviesLoading","setSavedMoviesLoading","useState","saveMovie","useMutation","loading","error","data","refetch","useQuery","variables","page","removeMovie","savedMovies","setSavedMovies","useLayoutEffect","user","getSavedMovies","results","addMovieToSaved","async","find","_ref","id","movie","prevMovies","movieId","_movie$genres","movieObj","title","releaseDate","image","genres","map","m","adult","backdropPath","originalLanguage","originalTitle","overview","popularity","video","voteAverage","voteCount","console","removeMovieFromSaved","filter","movieIdCheck","String","MOVIES_BY_IDS_QUERY","Recommendation","searchParams","useSearchParams","setMovieId","params","setParams","ids","boxMinHeight","setBoxMinHeight","showNotification","NotificationComponent","useCustomNotification","useEffect","get","split","headerElement","document","querySelector","footerElement","headerHeight","offsetHeight","footerHeight","_jsx","ServerError","_jsxs","Box","sx","minHeight","display","flexDirection","alignItems","padding","backgroundColor","children","MovieDetailModal","isPreviewMode","open","onClose","onCloseConfirmModal","addFavoriteMovie","FormattedMessage","vertical","horizontal","removeFavoriteMovie","Typography","variant","gutterBottom","Grid","item","xs","md","width","Paper","flexGrow","renderSkeletons","container","spacing","moviesByIds","lg","MovieCard","onCardSelect","log","openMovieDetailsById","Array","from","_","index","Skeleton","height"],"sourceRoot":""}